{-Maybe just have a dollar threshhold that declares the winner.  
--Need to make the Curation Stake forfeits go to the Winning Curators.
--How do we compare votes for two different Intell Providers.  Maybe the Curation Stake isn't the vote, maybe the vote happens
in the DataScript.
--This was modified from the Crowdfunding Contract on Plutus Playground.
--Need to include a mechanism for the Bounty Maker to contribute the Intell Bounty and then get the appropriate portions of the
Intell Bounty out to the Intell Provider and the winning Curaters.  Maybe that mechanism looks a lot like a regular contribution
and it just has different collection and refund destinations and triggers.
--Eventually would need to shadow this voting module for Blacklist Voting.
--Maybe need to somehow make the old campaign target dynamically equal to the contribution (i.e. vote) value for whatever
Intell provider receives the most votes. 

-}


import qualified Language.PlutusTx         as PlutusTx
import           Language.PlutusTx.Prelude
import           Ledger                    (Address, DataScript (DataScript), PendingTx, PubKey,
                                            RedeemerScript (RedeemerScript), TxId, ValidatorScript (ValidatorScript),
                                            applyScript, compileScript, hashTx, lifted, pendingTxValidRange,
                                            scriptAddress, valueSpent)
import qualified Ledger.Interval           as Interval
import           Ledger.Slot               (Slot, SlotRange)
import qualified Ledger.Validation         as V
import           Ledger.Value              (Value)
import qualified Ledger.Value              as Value
import           Playground.Contract
import           Wallet                    (EventHandler (EventHandler), EventTrigger, MonadWallet, andT,
                                            collectFromScript, collectFromScriptTxn, fundsAtAddressGeqT, logMsg,
                                            ownPubKey, payToScript, register, slotRangeT)
import qualified Wallet                    as W
import           Wallet.Emulator           (Wallet)
import qualified Wallet.Emulator           as EM

data CurationVote = CurationVote
    { curationVoteDeadline           :: Slot
    -- ^ The date by which the Curation Vote target has to be met
    , curationVoteTarget             :: Value
    -- ^ Target amount of Curatin Votes for the Intell Provider to be declared a winner
    , curationStakeForfeitDeadline :: Slot
    -- ^ The date by which the Winning Intell Provider has to collect the funds
    , intelProviderAddress              :: PubKey
    -- ^ Public key of the intellProvider. This key is entitled to retrieve the
    --   funds if that intellProvider is the winner.
    } deriving (Generic, ToJSON, FromJSON, ToSchema)
    
PlutusTx.makeLift ''CurationVote

-- | Construct a 'CurationVote' value from the CurationVote parameters,
--   using the wallet's public key.
mkCurationVote :: Slot -> Value -> Slot -> Wallet -> CurationVote
mkCurationVote ddl target curationVoteDdl ownerWallet =
    CurationVote
        { curationVoteDeadline = ddl
        , curationVoteTarget   = target
        , curationStakeForfeitDeadline = collectionDdl
        , intelProviderAddress = EM.walletPubKey ownerWallet
        }
    
-- | The 'SlotRange' during which the votes can be collected
curationStakeForfeitRange :: CurationVote -> SlotRange
curationStakeForfeitRange cmp =
    W.interval (curationVoteDeadline cmp) (curationVoteForfeitDeadline cmp)
    
-- | The 'SlotRange' during which a curationReward may be claimed
curationRewardRange :: CurationVote -> SlotRange
curationRewardRange cmp =
    W.intervalFrom (curationVoteRewardDeadline cmp)  
    
data CurationVoteAction = Forfeit | Reward
    deriving (Generic, ToJSON, FromJSON, ToSchema)

PlutusTx.makeLift ''CurationVoteAction

-- | The validator script is a function of three arguments:
-- 1. A 'PubKey'. This is the data script. It is provided by the producing
--    transaction (the contribution)
--
-- 2. A 'CurationVoteAction'. This is the redeemer script. It is provided by the
--    redeeming transaction.
--
-- 3. A 'PendingTx value. It contains information about the current transaction
--    and is provided by the slot leader.
--    See note [PendingTx]
type CurationVoteValidator = PubKey -> CurationVoteAction -> PendingTx -> Bool

validCurationReward :: CurationVote -> PubKey -> PendingTx -> Bool
validCurationReward curationVote contributor ptx =
    -- Check that the transaction falls in the curation reward range of the campaign
    Interval.contains (curationRewardRange campaign) (pendingTxValidRange ptx)
    -- Check that the transaction is signed by the Intell Curator
    && (ptx `V.txSignedBy` contributor)

validCurationStakeForfeit :: CurationVote -> PendingTx -> Bool
validCurationStakeForfeit curationVote p =
    -- Check that the transaction falls in the curation vote forfeit range of the campaign
    (curationVoteForfeitRange curationVote `Interval.contains` pendingTxValidRange p)
    -- Check that the transaction is trying to spend more money than the campaign
    -- target (and hence the target was reached)
    && (valueSpent p `Value.geq` curationVoteTarget campaign)
    -- Check that the transaction is signed by the IntellProvider
    && (p `V.txSignedBy` IntellProvider curationVote)


-- | The validator script is of type 'CrowdfundingValidator', and is
-- additionally parameterized by a 'Campaign' definition. This argument is
-- provided by the Plutus client, using 'Ledger.applyScript'.
-- As a result, the 'Campaign' definition is part of the script address,
-- and different campaigns have different addresses. The Campaign{..} syntax
-- means that all fields of the 'Campaign' value are in scope
-- (for example 'campaignDeadline' in l. 70).
mkValidator :: CurationVote -> CurationVoteValidator
mkValidator c con act p = case act of
    -- the "Reward" branch
    Reward -> validCurationReward c con p
    -- the "Forfeit" branch
    Forfeit -> validCurationStakeForfeit c p
   

-- | The validator script that determines whether the campaign owner can
--   retrieve the funds or the contributors can claim a refund.

curationVoteScript :: CurationVote -> ValidatorScript
curationVoteScript cmp  = ValidatorScript $
    $$(Ledger.compileScript [|| mkValidator ||])
        `Ledger.applyScript`
            Ledger.lifted cmp

-- | The address of the [[Intel Bounty]]
intelBountyAddress :: CurationVote -> Ledger.Address
intelBountyAddress = Ledger.scriptAddress . curationVoteScript
 
-- | Contribute Votes (i.e. either funds or datascriptvote along with funds) to the Intel Bounty Address.

curate :: MonadWallet m => Slot -> Value -> Slot -> Wallet -> Value -> m ()
curate deadline target curationVoteDeadline ownerWallet value = do
    let cmp = mkCurationVote deadline target CurationVoteDeadline ownerWallet
    ownPK <- ownPubKey
    let ds = DataScript (Ledger.lifted ownPK)
        range = W.interval 1 (curationVoteDeadline cmp)

    -- `payToScript` is a function of the wallet API. It takes a campaign
    -- address, value, and data script, and generates a transaction that
    -- pays the value to the script. `tx` is bound to this transaction. We need
    -- to hold on to it because we are going to use it in the refund handler.
    -- If we were not interested in the transaction produced by `payToScript`
    -- we could have used `payeToScript_`, which has the same effect but
    -- discards the result.
    tx <- payToScript range (intelBountyAddress cmp) value ds

    logMsg "Curation Vote Submitted"
    
    -- `register` adds a blockchain event handler on the `rewardTrigger`
    -- event. It instructs the wallet to start watching the addresses mentioned
    -- in the trigger definition and run the handler when the reward condition
    -- is true.
    register (rewardTrigger value cmp) (rewardHandler (Ledger.hashTx tx) cmp)

    logMsg "Registered Reward trigger"
    
    

-- | Register a [[EventHandler]] to collect all the funds of a campaign
--
scheduleForfeit :: MonadWallet m => Slot -> Value -> Slot -> Wallet -> m ()
scheduleForfeit deadline target curationStakeForfeitDeadline ownerWallet = do
    let cmp = mkCampaign deadline target curationStakeForfeitDeadline ownerWallet
    register (forfeitTrigger cmp) (EventHandler (\_ -> do
        logMsg "Forfeiting Curation Stake"
        let redeemerScript = Ledger.RedeemerScript (Ledger.lifted Collect)
            range = curationStakeForfeitRange cmp
        collectFromScript range (contributionScript cmp) redeemerScript))

-- | An event trigger that fires when a rewardcan be claimed
rewardTrigger :: Value -> CurationVote -> EventTrigger
rewardTrigger vl c = andT
    (fundsAtAddressGeqT (intelBountyAddress c) vl)
    (slotRangeT (curationStakeForfeitRange c))

-- | An event trigger that fires when a Curation Stake is Forfeited
forfeitTrigger :: CurationVote -> EventTrigger
forfeitTrigger c = andT
    (fundsAtAddressGeqT (intelBountyAddress c) (curationVoteTarget c))
    (slotRangeT (curationStakeForfeitRange c))


-- | Claim a refund of our campaign contribution
rewardHandler :: MonadWallet m => TxId -> CurationVote -> EventHandler m
rewardHandler txid cmp = EventHandler (\_ -> do
    logMsg "Claiming reward"
    let validatorScript = curationVoteScript cmp
        redeemerScript  = Ledger.RedeemerScript (Ledger.lifted Refund)

    -- `collectFromScriptTxn` generates a transaction that spends the unspent
    -- transaction outputs at the address of the validator scripts, *but* only
    -- those outputs that were produced by the transaction `txid`. We use it
    -- here to ensure that we don't attempt to claim back other contributors'
    -- funds (if we did that, the validator script would fail and the entire
    -- transaction would be invalid).
    collectFromScriptTxn (refundRange cmp) validatorScript redeemerScript txid)   

$(mkFunctions ['scheduleForfeit, 'curate])
$(mkIotsDefinitions ['scheduleForfeit, 'curate])

{- note [Transactions in the crowdfunding campaign]

Assume there is a campaign `c :: Campaign` with two contributors
(identified by public key `pc_1` and `pc_2`) and one campaign owner (pco).
Each contributor creates a transaction, `t_1` and `t_2`, whose outputs are
locked by the scripts `contributionScript c pc_1` and `contributionScript
c pc_1` respectively.

There are two outcomes for the campaign.

1. Campaign owner collects the funds from both contributors. In this case
   the owner creates a single transaction with two inputs, referring to
   `t_1` and `t_2`. Each input contains the script `contributionScript c`
   specialised to a contributor. The redeemer script of this transaction
   contains the value `Collect`, prompting the validator script to check the
   branch for `Collect`.

2. Refund. In this case each contributor creates a transaction with a
   single input claiming back their part of the funds. This case is
   covered by the `Refund` branch, and its redeemer script is the
   `Refund` action.

In both cases, the validator script is run twice. In the first case
there is a single transaction consuming both inputs. In the second case there
are two different transactions that may happen at different times.

-}

{- note [RecordWildCards]

We can use the syntax "Campaign{..}" here because the 'RecordWildCards'
extension is enabled automatically by the Playground backend.

The extension is documented here:
* https://downloads.haskell.org/~ghc/7.2.1/docs/html/users_guide/syntax-extns.html

A list of extensions that are enabled by default for the Playground can be
found here:
* https://github.com/input-output-hk/plutus/blob/b0f49a0cc657cd1a4eaa4af72a6d69996b16d07a/plutus-playground/plutus-playground-server/src/Playground/Interpreter.hs#L44

-}

{- note [PendingTx]

This part of the API (the PendingTx argument) is experimental and subject
to change.

-}

--How Does this interact with the rest of the code?  Through the imports? Any problem with deleting?
myCurrency :: KnownCurrency
myCurrency = KnownCurrency "b0b0" "MyCurrency" ( "USDToken" :| ["EURToken"])
$(mkKnownCurrencies ['myCurrency])



    
